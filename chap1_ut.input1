!Redo tests from section 1.1.3 of Kamin's text using the Pascal-style syntax

3$
4+7$
x:=4$
x+x$
print x$
y:=5$
seq print x; print y; x*y qes$
if y>0 then 5 else 10 fi$
while y>0 do
  seq x:=x+x; y:=y-1 qes
od$
x$
fun #1 (x) := x + 1 nuf$
#1(4)$
fun double(x):=x+x nuf$
double(4)$
x$
fun setx(x,y):= seq x:=x+y; x qes nuf$
setx(x,1)$
x$
fun not(boolval):= if boolval then 0 else 1 fi nuf$
!<> cannot be a function name since < and > are delimiters.
fun <> (x, y):= not(x=y) nuf$
!# is not a delimiter and can be used in a name.
fun ## (x,y):= not(x=y) nuf$
fun mod(m,n):=m-n*(m/n)nuf$
fun gcd(m,n):=
 seq
  r:=mod(m,n);
  while ##(r,0) do
   seq
    m:=n;
    n:=r;
    r:=mod(m,n)
   qes
  od;
  n
 qes
nuf$
gcd(6,15)$

fun gcd(m,n):=
  if n=0 then m else gcd(n,mod(m,n)) fi nuf$
gcd(6,15)$

!Normal precedence and associativity are implemented.
5*3+7$
5+3*7$
14-7-3$
48/12/2$
10/0$

!relational operators
5<10$
5>10$
5=5$
10<5$
10<5>-1$
10<5>-1=1$
5*3>2+2$
5*(3>2)+2$

!Unary plus and minus
10--5$
10++5$
10+-5$
10-+5$
10---5$
10+++5$
10-+--+5$

!Valid number range
!max positive number
max:=+9223372036854775807$
!The minimum negative number below cannot be entered directly because numbers
!are first interpreted as positive then negated.
min:=-9223372036854775808$
!Negate max positive number then subtract 1 to get min negative number.
min:=-9223372036854775807-1$
max+min$
!Numbers that are input directly must be in range LLONG_MIN to LLONG_MAX.
d:=99999999999999999999$
!Numbers that go outside of that range in calculations will wrap around.
d:=max+1$
d:=min-1$

!Keywords cannot be redefined
fun if (x) := x+5 nuf$
if := 20$

!Names may contain any char that is not a delimiter and must
!not contain only digits.
!Delimiters = ' ','(',')','+','-','*','/',':','=','<','>',';',',','$','!'
~12#ab:=25$
~12#ab$
x:=15-~12#ab+7$

!A string of digits is not a valid name.
fun 222  (x) := x+222 nuf$

!Inserting a non-delimiter char into a string of digits makes a valid name.
fun 222# (x) := x+222 nuf$
222#(3)$
x:=100-222#(3)-50$

!Inserting a delimiter in a name causes erroneous results.
a(b:=25$

!The same name may be used for a variable and a function at the same time. 
fun inc10 (x) := x+10 nuf$
inc10:=25$
inc10$
inc10(88)$

sum:=25$
fun sum(x,y):= x+y nuf$
sum$
sum(33,44)$

!Multiple assignment
i:=j:=k:=25$
i$
j$
k$

!ERROR MESSAGE TESTS

!Syntax Errors

fun david(x,+,z):= x+1 nuf$
fun +++(x):= x+1 nuf$
abc:=)25$

!Max NAMELENG=20 but the var and function names below have 21 chars.
abcdefghijklmnopqrstu+77-10/0+33-abc*8$
fun abcdefghijklmnopqrstu(x):=x+10 nuf$

!lhs of an assignment must be a name
22:=4$

!Multiple syntax errors in a single input.
!First is reported, others skipped as parser resynchronizes with next $.
!Value of ijk is not changed.
ijk:=33$
ijk:=50-sum(10,*)+25-4*3+sum(*,15)-48/4+)load bad_data.txt$
ijk$


!Semantic Errors
!
!Since these are not syntax errors, the parser does not call yyerror().
!Such errors are detected in the application logic and cause a value of
!zero to be assigned to the erroneous expression.
!So the values of c$, a$ and b$ below return 0 due to such errors.

!Wrong number of arguments to mod()
c:=17-10-mod(100)+25*3$
c$

!Division by zero.
10/0$
a:=17-10/0+25*3$
a$

!Undefined function
b:=33$
b:=25-10+square(3)-5$
b$

!Three semantic errors (1 undef var & 2 div by 0) in a single input
!
c:=xyz+25-10/0-3*5+10/0-8*3$
c$

!Syntax & Semantic errors in same input
!
!Note that a syntax error prevents an expression from being evaluated.
!This is demonstrated below by inserting a syntax error in the above
!expression with three semantic errors. Since undef var & div by 0 errors
!are detected during the eval() function, they are not reported.
!Only the syntax error is reported.
!
c:=xyz+25-10/0-3*5+10/0-8*3-sum(10,*)$

quit$

